import profile
from tkinter.font import names
from xml.sax import parse

from pyexpat.errors import messages
from telegram.ext import ApplicationBuilder, MessageHandler, filters, CallbackQueryHandler, CommandHandler
from gpt import *
from util import *


async def start(update, context):
    dialog.mode = "main"
    text = load_message("main")
    await send_photo(update, context, "main")
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        "start": "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞",
        "profile": "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–ª—è üòé",
        "opener": "—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞",
        "message": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üòà",
        "date": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üî•",
        "gpt": "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT üß†"

    })


async def gpt(update, context):
    dialog.mode = "gpt"
    text = load_message("gpt")
    await send_photo(update, context, "gpt")
    await send_text(update, context, text)


async def date(update, context):
    dialog.mode = "date"
    text = load_message("date")
    await send_photo(update, context, "date")
    await send_text_buttons(update, context, text, {
        "date_grande": "–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ",
        "date_robbie": "–ú–∞—Ä–≥–æ –†–æ–±–±–∏",
        "date_zendaya": "–ó–µ–Ω–¥–µ—è",
        "date_gosling": "–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥",
        "date_hardy": "–¢–æ–º –•–∞—Ä–¥–∏"
    })


async def dateDialog(update, context):
    text = update.message.text
    my_message = await send_text(update, context, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç...")
    answer = await chatGpt.add_message(text)
    await my_message.edit_text(answer)


async def date_buttons(update, context):
    text = update.callback_query.data
    await update.callback_query.answer()
    await send_photo(update, context, text)
    await send_text(update, context, "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –¢–µ–ø–µ—Ä—å –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥")
    prompt = load_prompt(text)
    chatGpt.set_prompt(prompt)


async def message(update, context):
    dialog.mode = "message"
    text = load_message("message")
    await send_photo(update, context, "message")
    await send_text_buttons(update, context, text, {
        "message_next": "–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "message_date": "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ"
    })
    dialog.list.clear()


async def message_buttons(update, context):
    text = update.callback_query.data
    await update.callback_query.answer()
    prompt = load_prompt(text)
    user_chat_history = "\n\n".join(dialog.list)

    messageAwait = await send_text(update, context, "ChatGptüß† –¥—É–º–∞–µ—Ç –Ω–∞–¥ –≤–∞—Ä–∏–∞–Ω—Ç–æ–º –æ—Ç–≤–µ—Ç–∞")
    answer = await chatGpt.send_question(prompt, user_chat_history)
    await messageAwait.edit_text(answer)


async def messageDialog(update, context):
    text = update.message.text
    dialog.list.append(text)


async def profile(update, context):
    dialog.mode = "profile"
    text = load_message("profile")
    await send_photo(update, context, "profile")
    await send_text(update, context, text)
    dialog.user.clear()
    dialog.counter = 0
    await send_text(update, context, "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")


async def profileDialog(update, context):
    text = update.message.text
    dialog.counter += 1
    match dialog.counter:
        case 1:
            dialog.user["age"] = text
            await send_text(update, context, "–ö–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?")
        case 2:
            dialog.user["occupation"] = text
            await send_text(update, context, "–£ –≤–∞—Å –µ—Å—Ç—å —Ö–æ–±–±–∏?")
        case 3:
            dialog.user["hobby"] = text
            await send_text(update, context, "–ß—Ç–æ –≤–∞–º –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –ª—é–¥—è—Ö?")
        case 4:
            dialog.user["annoys"] = text
            await send_text(update, context, "–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞")
        case 5:
            dialog.user["goals"] = text
            prompt = load_prompt("profile")
            profileAnswers = dialog_user_info_to_str(dialog.user)
            message = await send_text(update, context, "ChatGptüß† –≥–æ—Ç–æ–≤–∏—Ç profile")
            answerGpt = await chatGpt.send_question(prompt, profileAnswers)
            await message.edit_text(answerGpt)


async def opener(update, context):
    dialog.mode = "opener"
    text = load_message("opener")
    await send_photo(update, context, "opener")
    await send_text(update, context, text)
    dialog.user.clear()
    dialog.counter = 0
    await send_text(update, context, "–ò–º—è –¥–µ–≤—É—à–∫–∏?")

async def openerDialog(update, context):
    text = update.message.text
    dialog.counter += 1
    match dialog.counter:
        case 1:
            dialog.user["name"] = text
            await send_text(update, context, "–°–∫–æ–ª—å–∫–æ –µ–π –ª–µ—Ç?")
        case 2:
            dialog.user["age"] = text
            await send_text(update, context, "–û—Ü–µ–Ω–∏—Ç–µ –µ–µ –≤–Ω–µ—à–Ω–æ—Å—Ç—å 1-10 –±–∞–ª–ª–æ–≤")
        case 3:
            dialog.user["handsome"] = text
            await send_text(update, context, "–ö–µ–º –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç?")
        case 4:
            dialog.user["occupation"] = text
            await send_text(update, context, "–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞")
        case 5:
            dialog.user["goals"] = text
            prompt = load_prompt("opener")
            profileAnswers = dialog_user_info_to_str(dialog.user)
            message = await send_text(update, context, "ChatGptüß† –≥–æ—Ç–æ–≤–∏—Ç –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            answerGpt = await chatGpt.send_question(prompt, profileAnswers)
            await message.edit_text(answerGpt)




async def mood_buttons(update, context):
    query = update.callback_query.data
    match (query):
        case "good":
            await send_text(update, context, "–û—Ç–ª–∏—á–Ω–æ, —è —Ä–∞–¥ –∑–∞ —Ç–µ–±—è");
        case "average":
            await send_text(update, context, "Drink cup of coffee")
        case "bad":
            await send_text(update, context, "What should i do to cheer you up?")

async def gptDialog(update, context):
    text = update.message.text
    prompt = load_prompt("gpt")
    answerOfChatGpt = await chatGpt.send_question(prompt, text)
    await send_text(update, context, answerOfChatGpt)
async def hello(update, context):
    if dialog.mode == "gpt":
        await gptDialog(update, context)
    if dialog.mode == "date":
        await dateDialog(update, context)
    if dialog.mode == "message":
        await messageDialog(update, context)
    if dialog.mode == "profile":
        await profileDialog(update, context)
    if dialog.mode == "opener":
        await openerDialog(update, context)
    else:
        await send_text(update, context, "*–ó–¥–∞—Ä–æ–≤–∞, –∫–∞–∫ —Å–∞–º?*")
        await send_text(update, context, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ \"_" + update.message.text + "_\"")
        await send_text_buttons(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", {
            "good": "–•–æ—Ä–æ—à–µ–µ",
            "average": "–°—Ä–µ–¥–Ω–µ–µ",
            "bad": "–ü–ª–æ—Ö–æ–µ"
        })


dialog = Dialog()
dialog.mode = None
dialog.list = []
dialog.counter = 0
dialog.user = {}
chatGpt = ChatGptService(
    token="${token}")

print("App working")
app = ApplicationBuilder().token("8077741884:AAHqikyhHwbsFHSvYqoBNTNS7EYJQACR-0Y").build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("gpt", gpt))
app.add_handler(CommandHandler("date", date))
app.add_handler(CommandHandler("message", message))
app.add_handler(CommandHandler("profile", profile))
app.add_handler(CommandHandler("opener", opener))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, hello))

app.add_handler(CallbackQueryHandler(date_buttons, pattern="^date_.*"))
app.add_handler(CallbackQueryHandler(message_buttons, pattern="^message_.*"))
app.add_handler(CallbackQueryHandler(mood_buttons))

app.run_polling()
